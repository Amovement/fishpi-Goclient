!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/katris/golang/golang/fishpi-Golient/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
ApiKey	lib/librequests.go	/^	ApiKey   string$/;"	m	struct:lib.fishpiUserProperty	typeref:typename:string
Code	lib/libstruct.go	/^	Code int    `json:"code"`$/;"	m	struct:lib.apiKeyContent	typeref:typename:int
Code	lib/libstruct.go	/^	Code int    `json:"code"`$/;"	m	struct:lib.imageUpload	typeref:typename:int
Code	lib/libstruct.go	/^	Code int    `json:"code"`$/;"	m	struct:lib.oldMsgContent	typeref:typename:int
Code	lib/libstruct.go	/^	Code int `json:"code"`$/;"	m	struct:lib.responseMsgCode	typeref:typename:int
Content	lib/libstruct.go	/^	Content      string `json:"content"`$/;"	m	struct:lib.mdContent	typeref:typename:string
Count	lib/libstruct.go	/^	Count    int    `json:"count"`$/;"	m	struct:lib.redContent	typeref:typename:int
Data	lib/libstruct.go	/^	Data []struct {$/;"	m	struct:lib.oldMsgContent	typeref:typename:[]struct { UserNickname string `json:"userNickname"`; SysMetal string `json:"sysMetal"`; OID string `json:"oId"`; UserName string `json:"userName"`; Content string `json:"content"`; }
Data	lib/libstruct.go	/^	Data struct {$/;"	m	struct:lib.imageUpload	typeref:typename:struct { ErrFiles []interface{} `json:"errFiles"`; SuccMap struct { TmpPng string `json:"tmp.png"`; } `json:"succMap"`; }
Exit	lib/librequests.go	/^	Exit     chan os.Signal$/;"	m	struct:lib.fishpiUserProperty	typeref:typename:chan os.Signal
Got	lib/libstruct.go	/^	Got      int    `json:"got"`$/;"	m	struct:lib.redContent	typeref:typename:int
ImageUrl	lib/librequests.go	/^	ImageUrl string$/;"	m	struct:lib.fishpiUserProperty	typeref:typename:string
JSON	lib/libstruct.go	/^type JSON mdContent$/;"	t	package:lib	typeref:typename:mdContent
Key	lib/libstruct.go	/^	Key  string `json:"key"`$/;"	m	struct:lib.apiKeyContent	typeref:typename:string
Liveness	lib/libstruct.go	/^	Liveness float32 `json:"liveness"`$/;"	m	struct:lib.responseliveness	typeref:typename:float32
Md	lib/libstruct.go	/^	Md           string `json:"md"`$/;"	m	struct:lib.mdContent	typeref:typename:string
Money	lib/libstruct.go	/^	Money    int    `json:"money"`$/;"	m	struct:lib.redContent	typeref:typename:int
Msg	lib/libstruct.go	/^	Msg      string `json:"msg"`$/;"	m	struct:lib.redContent	typeref:typename:string
Msg	lib/libstruct.go	/^	Msg  string `json:"msg"`$/;"	m	struct:lib.apiKeyContent	typeref:typename:string
Msg	lib/libstruct.go	/^	Msg  string `json:"msg"`$/;"	m	struct:lib.imageUpload	typeref:typename:string
Msg	lib/libstruct.go	/^	Msg  string `json:"msg"`$/;"	m	struct:lib.oldMsgContent	typeref:typename:string
MsgType	lib/libstruct.go	/^	MsgType  string `json:"msgType"`$/;"	m	struct:lib.redContent	typeref:typename:string
NewFishpi	lib/librequests.go	/^func NewFishpi() (*fishpiUserProperty, error) {$/;"	f	package:lib	typeref:typename:(*fishpiUserProperty, error)
OID	lib/libstruct.go	/^	OID          string `json:"oId"`$/;"	m	struct:lib.mdContent	typeref:typename:string
Origin	lib/librequests.go	/^	Origin   string$/;"	m	struct:lib.fishpiUserProperty	typeref:typename:string
Password	lib/librequests.go	/^	Password string `json:"password"`$/;"	m	struct:lib.fishpiUserProperty	typeref:typename:string
Recivers	lib/libstruct.go	/^	Recivers string `json:"recivers"`$/;"	m	struct:lib.redContent	typeref:typename:string
Requests	lib/librequests.go	/^func Requests(mode, url string, date *requestContent) (body []byte, err error) {$/;"	f	package:lib	typeref:typename:(body []byte, err error)
SendMsg	lib/librequests.go	/^	SendMsg  string$/;"	m	struct:lib.fishpiUserProperty	typeref:typename:string
Sum	lib/libstruct.go	/^	Sum int `json:"sum"`$/;"	m	struct:lib.yesterday	typeref:typename:int
Type	lib/libstruct.go	/^	Type         string `json:"type"`$/;"	m	struct:lib.mdContent	typeref:typename:string
Type	lib/libstruct.go	/^	Type     string `json:"type"`$/;"	m	struct:lib.redContent	typeref:typename:string
UserName	lib/librequests.go	/^	UserName string `json:"username"`$/;"	m	struct:lib.fishpiUserProperty	typeref:typename:string
UserName	lib/libstruct.go	/^	UserName     string `json:"userName"`$/;"	m	struct:lib.mdContent	typeref:typename:string
UserNickname	lib/libstruct.go	/^	UserNickname string `json:"userNickname"`$/;"	m	struct:lib.mdContent	typeref:typename:string
Who	lib/libstruct.go	/^	Who      []struct {$/;"	m	struct:lib.redContent	typeref:typename:[]struct { UserMoney int `json:"userMoney"`; Time string `json:"time"`; Avatar string `json:"avatar"`; UserName string `json:"userName"`; UserID string `json:"userId"`; }
Who	lib/libstruct.go	/^	Who []struct {$/;"	m	struct:lib.getRedpacketContent	typeref:typename:[]struct { UserMoney int `json:"userMoney"`; Time string `json:"time"`; Avatar string `json:"avatar"`; UserName string `json:"userName"`; UserID string `json:"userId"`; }
WssClient	lib/librequests.go	/^func (fish *fishpiUserProperty) WssClient() {$/;"	f	struct:lib.fishpiUserProperty
WssGetLiveness	lib/librequests.go	/^func (fish *fishpiUserProperty) WssGetLiveness() {$/;"	f	struct:lib.fishpiUserProperty
WssGetYesterdayPoint	lib/librequests.go	/^func (fish *fishpiUserProperty) WssGetYesterdayPoint() {$/;"	f	struct:lib.fishpiUserProperty
WssLink	lib/librequests.go	/^func (fish *fishpiUserProperty) WssLink() {$/;"	f	struct:lib.fishpiUserProperty
WssLogin	lib/librequests.go	/^func (fish *fishpiUserProperty) WssLogin() error {$/;"	f	struct:lib.fishpiUserProperty	typeref:typename:error
WssOnline	lib/librequests.go	/^func WssOnline(mes *JSON) {$/;"	f	package:lib
WssOpenRedPacket	lib/librequests.go	/^func (fish *fishpiUserProperty) WssOpenRedPacket(msg *JSON) {$/;"	f	struct:lib.fishpiUserProperty
WssPrintMsg	lib/librequests.go	/^func (fish *fishpiUserProperty) WssPrintMsg(userNickname, userName, info, md string) {$/;"	f	struct:lib.fishpiUserProperty
WssSendImage	lib/librequests.go	/^func (fish *fishpiUserProperty) WssSendImage(path string) {$/;"	f	struct:lib.fishpiUserProperty
WssSendMsg	lib/librequests.go	/^func (fish *fishpiUserProperty) WssSendMsg(mold string) {$/;"	f	struct:lib.fishpiUserProperty
WssSetHeartMod	lib/librequests.go	/^func (fish *fishpiUserProperty) WssSetHeartMod() {$/;"	f	struct:lib.fishpiUserProperty
WssSetRockMod	lib/librequests.go	/^func (fish *fishpiUserProperty) WssSetRockMod() {$/;"	f	struct:lib.fishpiUserProperty
apiKeyContent	lib/libstruct.go	/^type apiKeyContent struct {$/;"	s	package:lib
client	lib/libstruct.go	/^	client = &http.Client{}$/;"	v	package:lib
content	lib/librequests.go	/^	content     map[string]string$/;"	m	struct:lib.requestContent	typeref:typename:map[string]string
fishpiUserProperty	lib/librequests.go	/^type fishpiUserProperty struct {$/;"	s	package:lib
getRedpacketContent	lib/libstruct.go	/^type getRedpacketContent struct {$/;"	s	package:lib
heartMod	lib/libstruct.go	/^	rockMod, heartMod   bool$/;"	v	package:lib	typeref:typename:bool
help	lib/libstruct.go	/^	help                string$/;"	v	package:lib	typeref:typename:string
helpInfo	lib/libstruct.go	/^	helpInfo            = []string{$/;"	v	package:lib
imageBuffer	lib/librequests.go	/^	imageBuffer io.Reader$/;"	m	struct:lib.requestContent	typeref:typename:io.Reader
imageUpload	lib/libstruct.go	/^type imageUpload struct {$/;"	s	package:lib
lib	lib/librequests.go	/^package lib$/;"	p
lib	lib/libstruct.go	/^package lib$/;"	p
liveness	lib/libstruct.go	/^	liveness            responseliveness$/;"	v	package:lib	typeref:struct:responseliveness
main	main.go	/^func main() {$/;"	f	package:main
main	main.go	/^package main$/;"	p
md5String	lib/librequests.go	/^func (fish *fishpiUserProperty) md5String(msg *string) {$/;"	f	struct:lib.fishpiUserProperty
mdContent	lib/libstruct.go	/^type mdContent struct {$/;"	s	package:lib
message	lib/librequests.go	/^	message  JSON$/;"	m	struct:lib.fishpiUserProperty	typeref:typename:JSON
messageType	lib/libstruct.go	/^type messageType map[string]func(message *JSON)$/;"	t	package:lib	typeref:typename:map[string]func(message *JSON)
msgHandle	lib/librequests.go	/^func msgHandle(msg, md *string, reg []string) (err error) {$/;"	f	package:lib	typeref:typename:(err error)
oldMsgContent	lib/libstruct.go	/^type oldMsgContent struct {$/;"	s	package:lib
openRedPacke	lib/libstruct.go	/^	openRedPacke = make(map[string]string)$/;"	v	package:lib
packageContent	lib/libstruct.go	/^	packageContent      getRedpacketContent$/;"	v	package:lib	typeref:struct:getRedpacketContent
password	config.json	/^  "password": "qnyripxt,00"$/;"	s
redChannel	lib/libstruct.go	/^	redChannel   = make(chan bool)$/;"	v	package:lib
redContent	lib/libstruct.go	/^type redContent struct {$/;"	s	package:lib
redPacketStatus	lib/librequests.go	/^func (fish *fishpiUserProperty) redPacketStatus(msg *JSON, msgContent *redContent) bool {$/;"	f	struct:lib.fishpiUserProperty	typeref:typename:bool
redType	lib/libstruct.go	/^	redType      = map[string]string{$/;"	v	package:lib
reg	lib/libstruct.go	/^	reg = []string{$/;"	v	package:lib
requestContent	lib/librequests.go	/^type requestContent struct {$/;"	s	package:lib
responseMsgCode	lib/libstruct.go	/^type responseMsgCode struct {$/;"	s	package:lib
responseliveness	lib/libstruct.go	/^type responseliveness struct {$/;"	s	package:lib
rockMod	lib/libstruct.go	/^	rockMod, heartMod   bool$/;"	v	package:lib	typeref:typename:bool
sendMessage	lib/libstruct.go	/^	sendMessage  = make(map[string]string)$/;"	v	package:lib
sendMsg	lib/librequests.go	/^func (fish *fishpiUserProperty) sendMsg(content string) {$/;"	f	struct:lib.fishpiUserProperty
sendResponseContent	lib/libstruct.go	/^	sendResponseContent responseMsgCode$/;"	v	package:lib	typeref:struct:responseMsgCode
setImageRequestBody	lib/librequests.go	/^func setImageRequestBody(path string) (io.Reader, error) {$/;"	f	package:lib	typeref:typename:(io.Reader, error)
setRequestBody	lib/librequests.go	/^func setRequestBody(content map[string]string) (io.Reader, error) {$/;"	f	package:lib	typeref:typename:(io.Reader, error)
username	config.json	/^  "username": "bulabula",$/;"	s
yesterday	lib/libstruct.go	/^type yesterday struct {$/;"	s	package:lib
yesterdayPonit	lib/libstruct.go	/^	yesterdayPonit      yesterday$/;"	v	package:lib	typeref:struct:yesterday
使用说明	README.md	/^### 使用说明$/;"	S	chapter:鱼排Go终端客户端
前言	README.md	/^### 前言$/;"	S	chapter:鱼排Go终端客户端
命令	README.md	/^### 命令$/;"	S	chapter:鱼排Go终端客户端
注言	README.md	/^### 注言$/;"	S	chapter:鱼排Go终端客户端
结语	README.md	/^# 结语$/;"	c
鱼排Go终端客户端	README.md	/^# 鱼排Go终端客户端$/;"	c
